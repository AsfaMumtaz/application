{{- if .Values.deployment }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
{{ include "application.labels.stakater" . | indent 4 }}
{{ include "application.labels.chart" . | indent 4 }}
{{- if .Values.deployment.additionalLabels }}
{{ toYaml .Values.deployment.additionalLabels | indent 4 }}
{{- end }}
{{- if or .Values.deployment.annotations .Values.deployment.reloadOnChange }}
  annotations:
{{- end }}
{{- if .Values.deployment.annotations }}
{{ toYaml .Values.deployment.annotations | indent 4 }}
{{- end }}
{{- if .Values.deployment.reloadOnChange }} 
    reloader.stakater.com/auto: "true"
{{- end }}
  name: {{ template "application.name" . }}
  namespace: {{ template "application.namespace" . }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
{{ include "application.labels.selector" . | indent 6 }}
  {{- if .Values.deployment.strategy }}
  strategy:
{{ toYaml .Values.deployment.strategy | indent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
{{ include "application.labels.selector" . | indent 8 }}
{{- if .Values.deployment.podLabels }}
{{ toYaml .Values.deployment.podLabels | indent 8 }}
{{- end }}
{{- if or .Values.deployment.additionalPodAnnotations .Values.deployment.fluentdConfigAnnotations }}
      annotations:
{{- end }}
{{- with .Values.deployment.additionalPodAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if .Values.deployment.fluentdConfigAnnotations }}
        fluentdConfiguration: >
          [
            {
              "containers":
              [
                {
                  "expressionFirstLine": "{{ .Values.deployment.fluentdConfigAnnotations.regexFirstLine }}",
                  "expression": "{{ .Values.deployment.fluentdConfigAnnotations.regex }}",
                  "timeFormat": "{{ .Values.deployment.fluentdConfigAnnotations.timeFormat }}",
                  "containerName": "{{ template "application.name" . }}"
                }
              ]{{- with .Values.deployment.fluentdConfigAnnotations.notifications }},
              "notifications": {
                {{- with .slack }}
                "slack": {
                  "webhookURL": "{{ .webhookURL }}",
                  "channelName": "{{ .channelName }}"
                },
                {{- end }}
                "key": "{{ .key }}",
                "pattern": "{{ .pattern }}"
              }
              {{- end }}
            }
          ]
{{- end }}
    spec:
      {{- if .Values.deployment.hostAliases }}
      hostAliases:      
{{ toYaml .Values.deployment.hostAliases | indent 6 }}
      {{- end }}
      {{- if or (.Values.deployment.initContainers) (.Values.mutualTls.enabled)}}
      initContainers:
      {{- if .Values.mutualTls.deployment.defaultInitContainers.keystore.enabled }}
        - args:
          - -x
          - -c
          - openssl pkcs12 -export -inkey $keyfile -in $crtfile -out $keystore_pkcs12 -password
            pass:$password
          command:
          - /bin/bash
          env:
          - name: keyfile
            value: /var/run/secrets/openshift.io/{{ template "application.name" . }}-service-tls/tls.key
          - name: crtfile
            value: /var/run/secrets/openshift.io/{{ template "application.name" . }}-service-tls/tls.crt
          - name: keystore_pkcs12
            value: /var/run/secrets/java.io/keystores/server.p12
          - name: password
            value: changeme
          image: {{ .Values.mutualTls.deployment.image.repo }}/openjdk:11-slim
          name: pem-to-keystore
          resources:
          {{- if .Values.mutualTls.deployment.defaultInitContainers.keystore.resources }}
{{ toYaml .Values.mutualTls.deployment.defaultInitContainers.keystore.resources | indent 12 }}
          {{- else }}
            limits:
              cpu: "0.4"
              memory: 400Mi
            requests:
              cpu: "0.2"
              memory: 200Mi
          {{- end }}
          volumeMounts:
          - mountPath: /var/run/secrets/java.io/keystores
            name: keystore-volume
          - mountPath: /var/run/secrets/openshift.io/{{ template "application.name" . }}-service-tls
            name: {{ template "application.name" . }}-service-tls
          workingDir: /tmp
        {{- end }}
        {{- if .Values.mutualTls.deployment.defaultInitContainers.truststore.enabled }}
        - name: pem-to-truststore
          image: {{ .Values.mutualTls.deployment.image.repo }}/openjdk:11-slim
          workingDir: /tmp
          resources:
          {{- if .Values.mutualTls.deployment.defaultInitContainers.truststore.resources }}
{{ toYaml .Values.mutualTls.deployment.defaultInitContainers.truststore.resources | indent 12 }}
          {{- else }}
            limits:
              cpu: "0.4"
              memory: 400Mi
            requests:
              cpu: "0.2"
              memory: 200Mi
          {{- end }}
          env:
          - name: truststore_jks
            value: /var/run/secrets/java.io/keystores/truststore.jks
          - name: password
            value: changeit
          - name: ca_bundle
            value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - name: ca_certs
            value: /var/run/secrets/java.io/certs
          command:
          - sh
          - "-c"
          - |
            /bin/bash <<'EOF'
            set -Eeuox pipefail
            if [ ! -f $truststore_jks ]; then
              find ${ca_certs} -type f -exec cat {} + > /var/run/secrets/java.io/keystores/certs
              cat  ${ca_bundle} >> /var/run/secrets/java.io/keystores/certs
              keytool -importkeystore -srckeystore $JAVA_HOME/lib/security/cacerts -srcstoretype JKS -destkeystore $truststore_jks -storepass $password -srcstorepass changeit \
              && csplit -z -f crt- /var/run/secrets/java.io/keystores/certs '/-----BEGIN CERTIFICATE-----/' '{*}' \
              && for file in crt-*; do keytool -import -noprompt -keystore $truststore_jks -file $file -storepass $password -alias service-$file; done || exit 0
              rm /var/run/secrets/java.io/keystores/certs
            fi
            EOF
          volumeMounts:
          - name: keystore-volume
            mountPath: /var/run/secrets/java.io/keystores
          - name: ca-certs
            mountPath: /var/run/secrets/java.io/certs
        {{- end }}
        {{- if .Values.deployment.initContainers }}
{{ toYaml .Values.deployment.initContainers | indent 6 }}
      {{- end }}
      {{- end }}
      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.deployment.tolerations }}
      tolerations:
{{ toYaml .Values.deployment.tolerations | indent 8 -}}
      {{- end }}
      {{- if .Values.deployment.affinity }}
      affinity:
{{ toYaml .Values.deployment.affinity | indent 8 -}}
      {{- end }}
      {{- if .Values.deployment.imagePullSecrets }}      
      imagePullSecrets:
      - name: {{ .Values.deployment.imagePullSecrets }}
      {{- end }}
      containers:
        {{- if .Values.deployment.openshiftOAuthProxy.enabled }}
      - args:
        - --https-address=:8443
        - --provider=openshift
        - --upstream=http://localhost:{{ .Values.deployment.openshiftOAuthProxy.port }}
        - --openshift-service-account={{ template "application.name" . }}
        - --tls-cert=/etc/tls/private/tls.crt
        - --tls-key=/etc/tls/private/tls.key
        - --cookie-secret=SECRET
        image: openshift/oauth-proxy:latest
        imagePullPolicy: IfNotPresent
        name: oauth-proxy
        ports:
        - containerPort: 8443
          name: proxy
        volumeMounts:
        - mountPath: /etc/tls/private
          name: proxy-tls 
        {{- end }}
      - name: {{ template "application.name" . }}
        image: "{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}"
        imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
        {{- if .Values.deployment.command }}
        command: {{- include "application.tplvalues.render" (dict "value" .Values.deployment.command "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.deployment.args }}
        args: {{- include "application.tplvalues.render" (dict "value" .Values.deployment.args "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.deployment.ports }}
        ports:
{{ toYaml .Values.deployment.ports | indent 10 }}
        {{- end }}
        {{- if .Values.deployment.envFrom }}
        envFrom:
        {{- range .Values.deployment.envFrom }}
        {{- if (eq .type "configmap") }}
        - configMapRef:
            {{- if .name }}
            name: {{ .name }}
            {{- else if .nameSuffix }}
            name: {{ template "application.name" $ }}-{{ .nameSuffix }}
            {{- else }}
            name: {{ template "application.name" $ }}
            {{- end }}
        {{- end }}
        {{- if (eq .type "secret") }}
        - secretRef:
            {{- if .name }}
            name: {{ .name }}
            {{- else if .nameSuffix }}
            name: {{ template "application.name" $ }}-{{ .nameSuffix }}
            {{- else }}
            name: {{ template "application.name" $ }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.deployment.env }}
        env:
{{ toYaml .Values.deployment.env | indent 10 }}
        {{- end }}
        livenessProbe:
{{ toYaml .Values.deployment.probes.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml .Values.deployment.probes.readinessProbe | indent 10 }}
      {{- if or (.Values.deployment.volumeMounts) (and (eq .Values.persistence.enabled true) (eq .Values.persistence.mountPVC true) )}} 
        volumeMounts:
        {{- if (eq .Values.persistence.mountPVC true) }}
        - mountPath: {{ .Values.persistence.mountPath }}
          name: {{ template "application.name" . }}-data
        {{- end }}
        {{- if .Values.deployment.volumeMounts }}
{{ toYaml .Values.deployment.volumeMounts | indent 8 }}
        {{- end }}
      {{- end }}
        resources:
          limits:
            memory: {{ .Values.deployment.resources.limits.memory }}
            cpu: {{ .Values.deployment.resources.limits.cpu }}
          requests:
            memory: {{ .Values.deployment.resources.requests.memory }}
            cpu: {{ .Values.deployment.resources.requests.cpu }}
        {{- if .Values.deployment.additionalContainers }}
{{ toYaml .Values.deployment.additionalContainers | indent 6 }}
        {{- end }}
        {{- if .Values.deployment.securityContext }}
      securityContext:      
{{ toYaml .Values.deployment.securityContext | indent 8 }}
          {{- end }}
      {{- if or (.Values.deployment.openshiftOAuthProxy.enabled) (.Values.deployment.volumes) (.Values.mutualTls.enabled) (and (eq .Values.persistence.enabled true) (eq .Values.persistence.mountPVC true) )}} 
      volumes:
        {{- if .Values.deployment.openshiftOAuthProxy.enabled }}
      - name: proxy-tls
        secret:
          secretName: {{ .Values.deployment.openshiftOAuthProxy.secretName }}
        {{- end }}
        {{- if .Values.mutualTls.enabled }}
      - name: {{ template "application.name" . }}-client-tls
        secret:
          secretName: {{ template "application.name" . }}-client-tls
      - emptyDir: {}
        name: keystore-volume
      - name: {{ template "application.name" . }}-service-tls
        secret:
          secretName: {{ template "application.name" . }}-service-tls
      - name: ca-certs
        projected:
          sources:
          - secret:
              items:
              - key: ca.crt
                path: ca.crt
              name: {{ template "application.name" . }}-client-tls
          {{- if .Values.mutualTls.deployment.projectSources }}
{{ include "application.tplvalues.render" ( dict "value" .Values.mutualTls.deployment.projectSources "context" $ ) | indent 10 }}
        {{- end }}
        {{- end }}
        {{- if (eq .Values.persistence.mountPVC true) }}
      - name: {{ template "application.name" . }}-data
        persistentVolumeClaim:
          claimName: {{ template "application.name" . }}-data
        {{- end }}
        {{- if .Values.deployment.volumes }}
{{ include "application.tplvalues.render" ( dict "value" .Values.deployment.volumes "context" $ ) | indent 6 }}
        {{- end }}
      {{- end }}  
      {{- if .Values.rbac.serviceAccount.name }}
      serviceAccountName: {{ .Values.rbac.serviceAccount.name }}
        {{- else }}
      serviceAccountName: {{ template "application.name" . }}
      {{- end }}
{{- end }}        
